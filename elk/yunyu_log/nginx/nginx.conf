user www-data;
worker_processes 4;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {
	# 如果是大规模集群环境，此处配置多台Kibana服务器即可（访问Nginx的15601端口后，会轮询访问下面的多台Kibana服务器）
	upstream kibana_server {
 		server 192.168.99.128:5601;
	}

	server {
                listen       15601;
                server_name  localhost;

                #charset koi8-r;

                #access_log  logs/host.access.log  main;

                location / {
                        # 权限的描述
                        auth_basic "Protect Kibana";
                        # 指定我们刚才生成好的passwd.db文件
                        auth_basic_user_file /etc/nginx/passwd.db;
                        root   html;
                        index  index.html index.htm;
                        # 代理的访问地址是Kibana的地址
                        # proxy_pass http://localhost:5601;
            		# 如果有多台服务器建议使用upstream配置方式进行访问的负载均衡
            		proxy_pass http://kibana_server$request_uri;

			# 只允许公司的外网IP，局域网IP可以访问
            		# allow   123.**.**.***;
           		# allow   192.168.99.0/255;
            		# deny    all;
                }
        
                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                        root   html;
                }
        }

	# 如果是大规模集群环境，此处配置多台ES服务器即可（访问Nginx的19200端口后，会轮询访问下面的多台ES服务器）
	upstream es_server {
		server 192.168.99.128:9200;
		server 192.168.99.212:9200;
		server 192.168.99.213:9200;
	}

        server {
                listen       19200;
                server_name  localhost;

                #charset koi8-r;

                #access_log  logs/host.access.log  main;

                location / {
                        # 权限的描述
                        auth_basic "Protect Elasticsearch";
                        # 指定我们刚才生成好的passwd.db文件
                        auth_basic_user_file /etc/nginx/passwd.db;
                        root   html;
                        index  index.html index.htm;
                        # 代理的访问地址是Elasticsearch的地址
                        # proxy_pass http://localhost:9200;
			# 如果有多台服务器建议使用upstream配置方式进行访问的负载均衡
            		proxy_pass http://es_server$request_uri;

                        # 只允许公司的外网IP，局域网IP可以访问
                        # allow   123.**.**.***;
                        # allow   192.168.99.0/255;
                        # deny    all;
                }

                error_page   500 502 503 504  /50x.html;
                location = /50x.html {
                        root   html;
                }
        }

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
